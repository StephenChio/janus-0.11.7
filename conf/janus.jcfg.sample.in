# General configuration: folders where the configuration and the plugins
# can be found, how output should be logged, whether Janus should run as
# a daemon or in foreground, default interface to use, debug/logging level
# and, if needed, shared apisecret and/or token authentication mechanism
# between application(s) and Janus.
general: {
	configs_folder = "@confdir@"			# Configuration files folder
	plugins_folder = "@plugindir@"			# Plugins folder
	transports_folder = "@transportdir@"	# Transports folder
	events_folder = "@eventdir@"			# Event handlers folder
	loggers_folder = "@loggerdir@"			# External loggers folder

		# The next settings configure logging
	#log_to_stdout = false					# Whether the Janus output should be written
											# to stdout or not (default=true)
	#log_to_file = "/path/to/janus.log"		# Whether to use a log file or not
	debug_level = 4							# Debug/logging level, valid values are 0-7
	#debug_timestamps = true				# Whether to show a timestamp for each log line #是否展示每一行的时间戳
	#debug_colors = false					# Whether colors should be disabled in the log #是否关闭debug颜色区分
	#debug_locks = true						# Whether to enable debugging of locks (very verbose!) #是否启用锁调试（非常详细！）
	#log_prefix = "[janus] "				# In case you want log lines to be prefixed by some
											# custom text, you can use the 'log_prefix' property.
											# It supports terminal colors, meaning something like
											# "[\x1b[32mjanus\x1b[0m] " would show a green "janus"
											# string in square brackets (assuming debug_colors=true).

		# This is what you configure if you want to launch Janus as a daemon
	#daemonize = true						# Whether Janus should run as a daemon
											# or not (default=run in foreground)
	#pid_file = "/path/to/janus.pid"		# PID file to create when Janus has been
											# started, and to destroy at shutdown
											# 启动Janus时创建的PID文件，并在关闭时销毁

		# There are different ways you can authenticate the Janus and Admin APIs
	#api_secret = "janusrocks"		# String that all Janus requests must contain
									# to be accepted/authorized by the Janus core.
									# Useful if you're wrapping all Janus API requests
									# in your servers (that is, not in the browser,
									# where you do the things your way) and you
									# don't want other application to mess with
									# this Janus instance.
									# 所有Janus请求必须包含该字符串才能被Janus core接收和通过认证。
									# 如果您正在服务器中包装所有Janus API请求，
									# 并且不希望其他应用程序弄乱这个Janus实例，那么这将非常有用。
	#token_auth = true				# Enable a token based authentication
									# mechanism to force users to always provide
									# a valid token in all requests. Useful if
									# you want to authenticate requests from web
									# users.
									# 启用基于令牌的身份验证机制，强制用户在所有请求中始终提供有效令牌。如果您想验证来自web用户的请求，那么这很有用。
									# 如果您使用了自己的服务器过滤用户网页请求，再间接请求janus服务器，这一步可以省略
	#token_auth_secret = "janus"	# Use HMAC-SHA1 signed tokens (with token_auth). Note that
									# without this, the Admin API MUST
									# be enabled, as tokens are added and removed
									# through messages sent there.
	admin_secret = "janusoverlord"	# String that all Janus requests must contain
									# to be accepted/authorized by the admin/monitor.
									# only needed if you enabled the admin API
									# in any of the available transports.
									# 所有Janus请求必须包含该字符串才能被 admin/monitor接口接收和通过认证。
									# 只有在可用传输中启用了管理API时才需要。


		# Generic settings
	#interface = "1.2.3.4"			# Interface to use (will be used in SDP)
	#server_name = "MyJanusInstance"# Public name of this Janus instance
									# as it will appear in an info request
	#session_timeout = 60			# How long (in seconds) we should wait before
									# deciding a Janus session has timed out. A
									# session times out when no request is received
									# for session_timeout seconds (default=60s).
									# Setting this to 0 will disable the timeout
									# mechanism, which is NOT suggested as it may
									# risk having orphaned sessions (sessions not
									# controlled by any transport and never freed).
									# To avoid timeouts, keep-alives can be used.
	#candidates_timeout = 45		# How long (in seconds) we should keep hold of
									# pending (trickle) candidates before discarding
									# them (default=45s). Notice that setting this
									# to 0 will NOT disable the timeout, but will
									# be considered an invalid value and ignored.
	#reclaim_session_timeout = 0	# How long (in seconds) we should wait for a
									# janus session to be reclaimed after the transport
									# is gone. After the transport is gone, a session
									# times out when no request is received for
									# reclaim_session_timeout seconds (default=0s).
									# Setting this to 0 will disable the timeout
									# mechanism, and sessions will be destroyed immediately
									# if the transport is gone.
	#recordings_tmp_ext = "tmp"		# The extension for recordings, in Janus, is
									# .mjr, a custom format we devised ourselves.
									# By default, we save to .mjr directly. If you'd
									# rather the recording filename have a temporary
									# extension while it's being saved, and only
									# have the .mjr extension when the recording
									# is over (e.g., to automatically trigger some
									# external scripts), then uncomment and set the
									# recordings_tmp_ext property to the extension
									# to add to the base (e.g., tmp --> .mjr.tmp).
									# 在录音中，janus的默认拓展名是.mjr,通常我们会直接保存成.mjr文件，
									# 如果你希望文件保存的时候能有一个其他的拓展名，
									# 可以取消该注释，且文件的拓展名会从 a.mjr -> a.mjr.tmp
	#event_loops = 8				# By default, Janus handles each have their own
									# event loop and related thread for all the media
									# routing and management. If for some reason you'd
									# rather limit the number of loop/threads, and
									# you want handles to share those, you can do that
									# configuring the event_loops property: this will
									# spawn the specified amount of threads at startup,
									# run a separate event loop on each of them, and
									# add new handles to one of them when attaching.
									# Notice that, while cutting the number of threads
									# and possibly reducing context switching, this
									# might have an impact on the media delivery,
									# especially if the available loops can't take
									# care of all the handles and their media in time.
									# As such, if you want to use this you should
									# provision the correct value according to the
									# available resources (e.g., CPUs available).
									# 默认情况下，Janus handles 每个都有自己的事件循环和用于所有媒体路由和管理的相关线程。
									# 如果出于某种原因，您希望限制循环/线程的数量，并且希望handles共享这些线程，
									# 那么可以通过配置event_loops属性来实现：
									# 这将在启动时生成指定数量的线程，在每个线程上运行单独的事件循环，并在附加时向其中一个线程添加新handles。
									# 请注意，减少线程数量可能减少上下文切换的同时，这也会对媒体交付产生影响，
									# 尤其是在可用循环无法及时处理所有句柄及其媒体的情况下。
									# 因此，如果您想使用它，您应该根据可用资源（例如，可用CPU）提供正确的值。
	#allow_loop_indication = true	# In case a static number of event loops is
									# configured as explained above, by default
									# new handles will be allocated on one loop or
									# another by the Janus core itself. In some cases
									# it may be helpful to manually tell the Janus
									# core which loop a handle should be added to,
									# e.g., to group viewers of the same stream on
									# the same loop. This is possible via the Janus
									# API when performing the 'attach' request, but
									# only if allow_loop_indication is set to true;
									# it's set to false by default to avoid abuses.
									# Don't change if you don't know what you're doing!
									# 如果如上所述配置了静态数量的事件循环，
									# 则默认情况下，Janus核心本身将在一个或另一个循环上分配新handles。
									# 在某些情况下，手动告诉Janus core应该将handles添加到哪个循环中可能会有所帮助
									# 例如，将同一个流的查看器分组到同一个循环中。
									# 当执行“attach”请求时，这可以通过Janus API实现，以后该handles的请求，都会由该循环处理
									# 但前提是allow_loop_indication设置为true；
									# 默认设置为false以避免滥用。如果你不知道自己在做什么，就不要改变！
	#opaqueid_in_api = true			# Opaque IDs set by applications are typically
									# only passed to event handlers for correlation
									# purposes, but not sent back to the user or
									# application in the related Janus API responses
									# or events; in case you need them to be in the
									# Janus API too, set this property to 'true'.
									# 应用程序设置的不透明ID通常仅传递给事件处理程序用于关联，
									# 而不会在相关Janus API响应或事件中发送回用户或应用程序；
									# 如果需要它们也在Janus API中，请将此属性设置为“true”。
	#hide_dependencies = true		# By default, a call to the "info" endpoint of
									# either the Janus or Admin API now also returns
									# the versions of the main dependencies (e.g.,
									# libnice, libsrtp, which crypto library is in
									# use and so on). Should you want that info not
									# to be disclose, set 'hide_dependencies' to true.
									# 默认情况下，对Janus或Admin API的 info 的调用现在也会返回主要依赖项的版本（例如，libnice、libsrtp，正在使用哪个加密库等等）。
									# 如果您不想泄露该信息，请将“hide_dependencies”设置为true。
	#exit_on_dl_error = false		# If a Janus shared libary cannot be loaded or an expected
									# symbol is not found, exit immediately.

		# The following is ONLY useful when debugging RTP/RTCP packets,
		# e.g., to look at unencrypted live traffic with a browser. By
		# default it is obviously disabled, as WebRTC mandates encryption.
		# 以下内容仅在调试RTP/RTCP数据包时有用，
		# 例如，用浏览器查看未加密的实时流量。
		# 默认情况下，它显然是禁用的，因为WebRTC要求加密
	#no_webrtc_encryption = true

		# Janus provides ways via its API to specify custom paths to save
		# files to (e.g., recordings, pcap captures and the like). In order
		# to avoid people can mess with folders they're not supposed to,
		# you can configure an array of folders that Janus should prevent
		# creating files in. If the 'protected_folder' property below is
		# commented, no folder is protected.
		# Notice that at the moment this only covers attempts to start
		# an .mjr recording and pcap/text2pcap packet captures.
	protected_folders = [
		"/bin",
		"/boot",
		"/dev",
		"/etc",
		"/initrd",
		"/lib",
		"/lib32",
		"/lib64",
		"/proc",
		"/sbin",
		"/sys",
		"/usr",
		"/var",
			# We add what are usually the folders Janus is installed to
			# as well: we don't just put "/opt/janus" because that would
			# include folders like "/opt/janus/share" that is where
			# recordings might be saved to by some plugins
		"/opt/janus/bin",
		"/opt/janus/etc",
		"/opt/janus/include",
		"/opt/janus/lib",
		"/opt/janus/lib32",
		"/opt/janus/lib64",
		"/opt/janus/sbin"
	]
}

# Certificate and key to use for DTLS (and passphrase if needed). 
# 用于DTL的证书和密钥（以及密码短语，如果需要）。
# If missing, Janus will autogenerate a self-signed certificate to use. 
# 如果缺失，Janus将自动生成一个自签名证书以供使用。
# Notice that self-signed certificates are fine for the purpose of WebRTC DTLS
# connectivity, for the time being, at least until Identity Providers
# are standardized and implemented in browsers. 
# 请注意，至少在身份提供者标准化并在浏览器中实现之前，自签名证书暂时可以用于WebRTC DTLS连接。
# If for some reason you want to enforce the DTLS stack in Janus to enforce valid certificates
# from peers, though, you can do that setting 'dtls_accept_selfsigned' to
# 'false' below: DO NOT TOUCH THAT IF YOU DO NOT KNOW WHAT YOU'RE DOING!
# 如果由于某些原因你想在Janus强制使用DTLS为端对端提供有效验证，你可以设置dtls_accept_selfsigned为false，如果你不清楚你在做什么，请不要碰这个参数
# You can also configure the DTLS ciphers to offer: the default if not
# set is "DEFAULT:!NULL:!aNULL:!SHA256:!SHA384:!aECDH:!AESGCM+AES256:!aPSK"
# Finally, by default NIST P-256 certificates are generated (see #1997),
# but RSA generation is still supported if you set 'rsa_private_key' to 'true'.
# 您还可以配置DTLS密码以提供：如果未设置，则默认为"DEFAULT:!NULL:!aNULL:!SHA256:!SHA384:!aECDH:!AESGCM+AES256:!aPSK"
# 最后，默认情况下会生成NIST P-256证书，但如果您将“rsa_private_key”设置为“true”，则仍然支持生成RSA。
certificates: {
	#cert_pem = "/path/to/certificate.pem"
	#cert_key = "/path/to/key.pem"
	#cert_pwd = "secretpassphrase"
	#dtls_accept_selfsigned = false
	#dtls_ciphers = "your-desired-openssl-ciphers"
	#rsa_private_key = false
}

# Media-related stuff: you can configure whether if you want to enable IPv6
# support (and link-local IPs), the minimum size of the NACK queue (in ms,
# defaults to 200ms) for retransmissions no matter the RTT, the range of
# ports to use for RTP and RTCP (by default, no range is envisaged), the
# starting MTU for DTLS (1200 by default, it adapts automatically),
# how much time, in seconds, should pass with no media (audio or
# video) being received before Janus notifies you about this (default=1s,
# 0 disables these events entirely), how many lost packets should trigger a
# 'slowlink' event to users (default=0, disabled), and how often, in milliseconds,
# to send the Transport Wide Congestion Control feedback information back
# to senders, if negotiated (default=200ms). Finally, if you're using BoringSSL
# you can customize the frequency of retransmissions: OpenSSL has a fixed
# value of 1 second (the default), while BoringSSL can override that. Notice
# that lower values (e.g., 100ms) will typically get you faster connection
# times, but may not work in case the RTT of the user is high: as such,
# you should pick a reasonable trade-off (usually 2*max expected RTT).
# 媒体相关配置：
# 您可以配置是否要启用IPv6支持（和链接本地IP）
# 无论RTT如何，用于重新传输的NACK队列的最小大小（毫秒，默认为200ms）
# 用于RTP和RTCP的端口范围（默认情况下，无限制）
# DTL的启动MTU（默认情况下，它会自动适应1200）、
# 多少时间没有收到任何媒体（音频或视频），Janus会通知你（默认值为1s，0完全禁用这些事件），
# 有多少丢失的数据包应该触发“slowlink”事件给用户（默认值为0，禁用）
# 将全传输拥塞控制反馈信息发送回发送方的频率（默认值为200ms）。
# 最后，如果您使用的是BoringSSL，则可以自定义重新传输的频率：OpenSSL的固定值为1秒（默认值），而BoringSSL可以覆盖该值。请注意，较低的值（例如100ms）通常会加快连接时间，但在用户的RTT较高的情况下可能不起作用：因此，您应该选择一个合理的权衡（通常为最大预期RTT的2倍）。
media: {
	#ipv6 = true
	#ipv6_linklocal = true
	#min_nack_queue = 500
	#rtp_port_range = "20000-40000"
	#dtls_mtu = 1200
	#no_media_timer = 1
	#slowlink_threshold = 4
	#twcc_period = 100
	#dtls_timeout = 500

	# Janus can do some optimizations on the NACK queue, specifically when
	# keyframes are involved. Namely, you can configure Janus so that any
	# time a keyframe is sent to a user, the NACK buffer for that connection
	# is emptied. This allows Janus to ignore NACK requests for packets
	# sent shortly before the keyframe was sent, since it can be assumed
	# that the keyframe will restore a complete working image for the user
	# anyway (which is the main reason why video retransmissions are typically
	# required). While this optimization is known to work fine in most cases,
	# it can backfire in some edge cases, and so is disabled by default.
	# Janus可以对NACK队列进行一些优化，特别是在涉及关键帧时。
	# 也就是说，您可以配置Janus，以便在任何时候向用户发送关键帧时，该连接的NACK缓冲区都会清空。
	# 这允许Janus忽略在发送关键帧之前不久发送的数据包的NACK请求，
	# 因为可以假设关键帧无论如何都会为用户恢复完整的工作图像（这是通常需要视频重新传输的主要原因）。
	# 虽然这种优化在大多数情况下工作正常，但在某些边缘情况下可能会适得其反，因此在默认情况下被禁用。
	#nack_optimizations = true

	# If you need DSCP packet marking and prioritization, you can configure
	# the 'dscp' property to a specific values, and Janus will try to
	# set it on all outgoing packets using libnice. Normally, the specs
	# suggest to use different values depending on whether audio, video
	# or data are used, but since all PeerConnections in Janus are bundled,
	# we can only use one. You can refer to this document for more info:
	# https://tools.ietf.org/html/draft-ietf-tsvwg-rtcweb-qos-18#page-6
	# That said, DON'T TOUCH THIS IF YOU DON'T KNOW WHAT IT MEANS!
	# 如果需要DSCP数据包标记和优先级，可以将“DSCP”属性配置为特定值，
	# Janus将尝试使用libnice在所有传出数据包上设置它。
	# 通常，规范建议根据使用的是音频、视频还是数据使用不同的值，
	# 但由于Janus中的所有对等连接都是捆绑的，因此我们只能使用一个。
	# 也就是说，如果你不知道这意味着什么，就不要碰它！
	#dscp = 46
}

# NAT-related stuff: specifically, you can configure the STUN/TURN
# servers to use to gather candidates if the gateway is behind a NAT,
# and srflx/relay candidates are needed. In case STUN is not enough and
# this is needed (it shouldn't), you can also configure Janus to use a
# TURN server# please notice that this does NOT refer to TURN usage in
# browsers, but in the gathering of relay candidates by Janus itself,
# e.g., if you want to limit the ports used by a Janus instance on a
# private machine. Furthermore, you can choose whether Janus should be
# configured to do full-trickle (Janus also trickles its candidates to
# users) rather than the default half-trickle (Janus supports trickle
# candidates from users, but sends its own within the SDP), and whether
# it should work in ICE-Lite mode (by default it doesn't). If libnice is
# at least 0.1.15, you can choose which ICE nomination mode to use: valid
# values are "regular" and "aggressive" (the default depends on the libnice
# version itself; if we can set it, we set aggressive nomination). You can
# also configure whether to use connectivity checks as keep-alives, which
# might help detecting when a peer is no longer available (notice that
# current libnice master is breaking connections after 50 seconds when
# keepalive-conncheck is being used, so if you want to use it, better
# sticking to 0.1.18 until the issue is addressed upstream). Finally,
# you can also enable ICE-TCP support (beware that this may lead to problems
# if you do not enable ICE Lite as well), choose which interfaces should
# be used for gathering candidates, and enable or disable the
# internal libnice debugging, if needed.
nat: {
	#stun_server = "stun.voip.eutelia.it"
	#stun_port = 3478
	nice_debug = false
	#full_trickle = true
	#ice_nomination = "regular"
	#ice_keepalive_conncheck = true
	#ice_lite = true
	#ice_tcp = true

	# By default Janus tries to resolve mDNS (.local) candidates: even
	# though this is now done asynchronously and shouldn't keep the API
	# busy, even in case mDNS resolution takes a long time to timeout,
	# you can choose to drop all .local candidates instead, which is
	# helpful in case you know clients will never be in the same private
	# network as the one the Janus instance is running from. Notice that
	# this will cause ICE to fail if mDNS is the only way to connect!
	# 默认情况下，Janus尝试解析MDN（.local）候选项。即使这是异步完成的也不会让API处于繁忙状态。
	# 一旦MDN解析需要很长时间才能超时，您也可以选择删除所有本地候选项。
	# 如果您知道客户端永远不会与Janus实例运行所在的专用网络在同一个专用网络中，这会很有帮助。
	# 请注意，如果MDN是唯一的连接方式，这将导致ICE失败
	#ignore_mdns = true

	# In case you're deploying Janus on a server which is configured with
	# a 1:1 NAT (e.g., Amazon EC2), you might want to also specify the public
	# address of the machine using the setting below. This will result in
	# all host candidates (which normally have a private IP address) to
	# be rewritten with the public address provided in the settings. As
	# such, use the option with caution and only if you know what you're doing.
	# Make sure you keep ICE Lite disabled, though, as it's not strictly
	# speaking a publicly reachable server, and a NAT is still involved.
	# If you'd rather keep the private IP address in place, rather than
	# replacing it (and so have both of them as advertised candidates),
	# then set the 'keep_private_host' property to true.
	# Multiple public IP addresses can be specified as a comma separated list
	# if the Janus is deployed in a DMZ between two 1-1 NAT for internal and
	# external users.
	# 如果您在配置了1:1 NAT的服务器上部署Janus（例如，Amazon EC2），您可能还需要使用以下设置指定机器的公共地址。
	# 这将导致使用设置中提供的公共地址重写所有候选主机（通常具有私有IP地址）。
	# 因此，只有在你知道自己在做什么的情况下，才能谨慎使用该选项。
	# 但是，请确保禁用ICE Lite，因为严格来说，它不是一个可公开访问的服务器，并且仍然涉及NAT。
	# 如果您希望保留私有IP地址，而不是替换它（因此将两者都作为公布的候选地址），请将“keep_private_host”属性设置为true。
	# 如果Janus部署在内部和外部用户的两个1-1 NAT之间的DMZ中，则可以将多个公共IP地址指定为逗号分隔的列表。
	#nat_1_1_mapping = "1.2.3.4"
	#keep_private_host = true

	# You can configure a TURN server in two different ways: specifying a
	# statically configured TURN server, and thus provide the address of the
	# TURN server, the transport (udp/tcp/tls) to use, and a set of valid
	# credentials to authenticate. Notice that you should NEVER configure
	# a TURN server for Janus unless it's really what you want! If you want
	# *users* to use TURN, then you need to configure that on the client
	# side, and NOT in Janus. The following TURN configuration should ONLY
	# be enabled when Janus itself is sitting behind a restrictive firewall
	# (e.g., it's part of a service installed on a box in a private home).
	# 您可以通过两种不同的方式配置TURN服务器：
	# 指定静态配置的TURN服务器，从而提供TURN服务器的地址
	# 要使用的传输（udp/tcp/tls）和一组要验证的有效凭据。
	# 请注意，除非您真正需要，否则您永远不应该为Janus配置TURN服务器！
	# 如果您希望用户使用TURN，那么您需要在客户端而不是Janus中进行配置。
	# 只有当Janus本身位于限制性防火墙之后时（例如，它是安装在私人住宅盒子上的服务的一部分），才应启用以下回合配置。
	#turn_server = "myturnserver.com"
	#turn_port = 3478
	#turn_type = "udp"
	#turn_user = "myuser"
	#turn_pwd = "mypassword"

	# You can also make use of the TURN REST API to get info on one or more
	# TURN services dynamically. This makes use of the proposed standard of
	# such an API (https://tools.ietf.org/html/draft-uberti-behave-turn-rest-00)
	# which is currently available in both rfc5766-turn-server and coturn.
	# You enable this by specifying the address of your TURN REST API backend,
	# the HTTP method to use (GET or POST) and, if required, the API key Janus
	# must provide. The timeout can be configured in seconds, with a default of
	# 10 seconds and a minimum of 1 second. Notice that the 'opaque_id' provided
	# via Janus API will be used as the username for a specific PeerConnection
	# by default; if that one is missing, the 'session_id' will be used as the
	# username instead.
	# 您还可以使用TURN REST API动态获取一个或多个TURN服务的信息。
	# 这利用了这种API的拟议标准，该标准目前在rfc5766 turn服务器和coturn中都可用。
	# 您可以通过指定TURN-REST API后端的地址、要使用的HTTP方法（GET或POST）以及Janus必须提供的API密钥（如果需要）来实现这一点。
	# 可以以秒为单位配置超时，默认值为10秒，最小值为1秒。
	# 请注意，默认情况下，通过Janus API提供的“opaque_id”将用作特定对等连接的用户名；如果缺少该用户名，则将使用“session_id”作为用户名。
	#turn_rest_api = "http://yourbackend.com/path/to/api"
	#turn_rest_api_key = "anyapikeyyoumayhaveset"
	#turn_rest_api_method = "GET"
	#turn_rest_api_timeout = 10

	# In case a TURN server is provided, you can allow applications to force
	# Janus to use TURN (https://github.com/meetecho/janus-gateway/pull/2774).
	# This is NOT allowed by default: only enable it if you know what you're doing.
	# 如果提供了TURN服务器，您可以允许应用程序强制Janus使用TURN。
	# 这在默认情况下是不允许的：只有当你知道自己在做什么时才启用它。
	#allow_force_relay = true

	# You can also choose which interfaces should be explicitly used by the
	# gateway for the purpose of ICE candidates gathering, thus excluding
	# others that may be available. To do so, use the 'ice_enforce_list'
	# setting and pass it a comma-separated list of interfaces or IP addresses
	# to enforce. This is especially useful if the server hosting the gateway
	# has several interfaces, and you only want a subset to be used. Any of
	# the following examples are valid:
	#     ice_enforce_list = "eth0"
	#     ice_enforce_list = "eth0,eth1"
	#     ice_enforce_list = "eth0,192.168."
	#     ice_enforce_list = "eth0,192.168.0.1"
	# By default, no interface is enforced, meaning Janus will try to use them all.
	#ice_enforce_list = "eth0"

	# In case you don't want to specify specific interfaces to use, but would
	# rather tell Janus to use all the available interfaces except some that
	# you don't want to involve, you can also choose which interfaces or IP
	# addresses should be excluded and ignored by the gateway for the purpose
	# of ICE candidates gathering. To do so, use the 'ice_ignore_list' setting
	# and pass it a comma-separated list of interfaces or IP addresses to
	# ignore. This is especially useful if the server hosting the gateway
	# has several interfaces you already know will not be used or will simply
	# always slow down ICE (e.g., virtual interfaces created by VMware).
	# Partial strings are supported, which means that any of the following
	# examples are valid:
	#     ice_ignore_list = "vmnet8,192.168.0.1,10.0.0.1"
	#     ice_ignore_list = "vmnet,192.168."
	# Just beware that the ICE ignore list is not used if an enforce list
	# has been configured. By default, Janus ignores all interfaces whose
	# name starts with 'vmnet', to skip VMware interfaces:
	ice_ignore_list = "vmnet"

	# In case you want to allow Janus to start even if the configured STUN or TURN
	# server is unreachable, you can set 'ignore_unreachable_ice_server' to true.
	# WARNING: We do not recommend to ignore reachability problems, particularly
	# if you run Janus in the cloud. Before enabling this flag, make sure your
	# system is correctly configured and Janus starts after the network layer of
	# your machine is ready. Note that Linux distributions offer such directives.
	# You could use the following directive in systemd: 'After=network-online.target'
	# https://www.freedesktop.org/software/systemd/man/systemd.unit.html#Before=
	#ignore_unreachable_ice_server = true
}

# You can choose which of the available plugins should be
# enabled or not. Use the 'disable' directive to prevent Janus from
# loading one or more plugins: use a comma separated list of plugin file
# names to identify the plugins to disable. By default all available
# plugins are enabled and loaded at startup.
plugins: {
	#disable = "libjanus_voicemail.so,libjanus_recordplay.so"
}

# You can choose which of the available transports should be enabled or
# not. Use the 'disable' directive to prevent Janus from loading one
# or more transport: use a comma separated list of transport file names
# to identify the transports to disable. By default all available
# transports are enabled and loaded at startup.
transports: {
	#disable = "libjanus_rabbitmq.so"
}

# As a core feature, Janus can log either on the standard output, or to
# a local file. Should you need more advanced logging functionality, you
# can make use of one of the custom loggers, or write one yourself. Use the
# 'disable' directive to prevent Janus from loading one or more loggers:
# use a comma separated list of logger file names to identify the loggers
# to disable. By default all available loggers are enabled and loaded at startup.
# 作为一项核心功能，Janus可以登录标准输出或本地文件。
# 如果您需要更高级的日志记录功能，您可以使用一个自定义日志记录程序，或者自己编写一个日志记录程序。
# 使用“disable”指令防止Janus加载一个或多个记录器
# 使用以逗号分隔的记录器文件名列表来标识要禁用的记录器。
# 默认情况下，启动时启用并加载所有可用的记录器
loggers: {
	#disable = "libjanus_jsonlog.so"
}

# Event handlers allow you to receive live events from Janus happening
# in core and/or plugins. Since this can require some more resources,
# the feature is disabled by default. Setting broadcast to yes will
# enable them. You can then choose which of the available event handlers
# should be loaded or not. Use the 'disable' directive to prevent Janus
# from loading one or more event handlers: use a comma separated list of
# file names to identify the event handlers to disable. By default, if
# broadcast is set to yes all available event handlers are enabled and
# loaded at startup. Finally, you can choose how often media statistics
# (packets sent/received, losses, etc.) should be sent: by default it's
# once per second (audio and video statistics sent separately), but may
# considered too verbose, or you may want to limit the number of events,
# especially if you have many PeerConnections active. To change this,
# just set 'stats_period' to the number of seconds that should pass in
# between statistics for each handle. Setting it to 0 disables them (but
# not other media-related events). By default Janus sends single media
# statistic events per media (audio, video and simulcast layers as separate
# events): if you'd rather receive a single containing all media stats in a
# single array, set 'combine_media_stats' to true.
# 事件处理程序允许您接收Janus在核心和/或插件中发生的实时事件。
# 由于这可能需要更多资源，因此默认情况下禁用该功能。
# 将“broadcast”设置为“true”将启用它们。
# 然后，您可以选择应加载或不加载哪些可用事件处理程序。
# 使用“disable”指令防止Janus加载一个或多个事件处理程序：使用逗号分隔的文件名列表来标识要禁用的事件处理程序。
# 默认情况下，如果“broadcast”设置为“true”，则所有可用的事件处理程序都将在启动时启用和加载。
# 最后，您可以选择媒体统计信息（发送/接收的数据包、丢失等）的发送频率：默认情况下为每秒一次（音频和视频统计信息分别发送）
# 但可能会被认为过于冗长，或者您可能希望限制事件的数量，尤其是当您有许多对等连接处于活动状态时。
# 要改变这一点，只需将“stats_period”设置为每个句柄的统计信息之间应该传递的秒数。将其设置为0将禁用它们（但不禁用其他与媒体相关的事件）。
# 默认情况下，Janus会按媒体发送单个媒体统计事件（音频、视频和同时广播层作为单独的事件）
# 如果您希望在单个阵列中接收包含所有媒体统计的单个事件，请将“combine_media_stats”设置为true。
events: {
	#broadcast = true
	#combine_media_stats = true
	#disable = "libjanus_sampleevh.so"
	#stats_period = 5
}
